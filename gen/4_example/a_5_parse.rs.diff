--- pie/examples/parser_dev/parse.rs
+++ pie/examples/parser_dev/parse.rs
@@ -35,4 +35,30 @@
       }
     }
   }
+
+  /// Parse `program_text` with rule `rule_name` using this compiled grammar, using `path` to annotate errors. Returns
+  /// parsed pairs formatted as a string.
+  ///
+  /// # Errors
+  ///
+  /// Returns `Err(error_string)` when parsing fails.
+  pub fn parse(&self, program_text: &str, rule_name: &str, path: Option<&str>) -> Result<String, String> {
+    if !self.rule_names.contains(rule_name) {
+      let message = format!("rule '{}' was not found", rule_name);
+      return Err(message);
+    }
+    // Note: can't store `Vm` in `CompiledGrammar` because `Vm` is not `Clone` nor `Eq`.
+    let vm = pest_vm::Vm::new(self.rules.clone());
+    match vm.parse(rule_name, program_text) {
+      Ok(pairs) => Ok(format!("{}", pairs)),
+      Err(mut error) => {
+        if let Some(path) = path {
+          error = error.with_path(path);
+        }
+        error = error.renamed_rules(|r| r.to_string());
+        let error_string = format!("{}", error);
+        Err(error_string)
+      }
+    }
+  }
 }
